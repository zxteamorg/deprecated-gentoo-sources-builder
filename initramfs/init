#!/bin/busybox sh

set -o pipefail

mount -n -t proc proc /proc || fatal "Cannot mount /proc"
echo 0 > /proc/sys/kernel/printk

mount -n -t devtmpfs devtmpfs /dev || fatal "Cannot mount /dev"
mkdir -m 0755 /dev/pts || fatal "Cannot create directory /dev/pts with perms 755"
mount -n -t devpts -o gid=5,mode=0620 devpts /dev/pts || fatal "Cannot mount /dev/pts"
mount -n -t sysfs sysfs /sys || fatal "Cannot mount /dev/pts"

cat <<EOF

        _____ __  __  ___   _   _   ___   _____ 
       |__  / \ \/ / |_ _| | \ | | |_ _| |_   _|
         / /   \  /   | |  |  \| |  | |    | |  
        / /_   /  \   | |  | |\  |  | |    | |  
       /____| /_/\_\ |___| |_| \_| |___|   |_| 

EOF


info() {
	if [ -z "$QUIET" ]; then
		echo " [I] $1"
	fi
}
warn() {
	echo " [W] $1"
}
fatal() {
	echo " [!] FATAL ERROR: $1"
	echo 1 > /proc/sys/kernel/printk
	echo ".Entering rescue shell."
	exec /bin/busybox sh
}

z_dhcp() {
	[ -n "$1" ] || fatal "z_dhcp(): Wrong argument error. Example: z_dhcp=\"eth0;eth1\""

	local FRIENDLY_ARGS=

	FRIENDLY_ARGS=$(echo "$1" | sed -r 's/;/ /g')

	for DEV in ${FRIENDLY_ARGS}; do
		/sbin/ip link set up "${DEV}" || fatal "z_dhcp(): Failure set UP state for device ${DEV}."
		/sbin/udhcpc -i "${DEV}" -n || fatal "z_dhcp(): Failure obtain lease for device ${DEV}."
	done
}

z_fsck() {
	[ -n "$1" ] || fatal "z_fsck(): Wrong argument error. Example: z_fsck=\"vg0/system,ext4;vg0/data,ext4\" (no /dev prefix)"

	local FRIENDLY_ARGS=
	local DEV=
	local FS=

	FRIENDLY_ARGS=$(echo "$1" | sed -r 's/;/ /g')

	for CHECK in ${FRIENDLY_ARGS}; do
		DEV=$(echo "${CHECK}" | cut -d, -f1)
		FS=$(echo "${CHECK}" | cut -d, -f2)
		info "Force check file system ${FS} on /dev/${DEV}"
		/sbin/fsck -f -p -t "${FS}" -f "/dev/${DEV}" || warn "z_fsck(): Failure check filesystem on /dev/${DEV} (${FS})."
	done
}

z_ip() {
	[ -n "$1" ] || fatal "z_ip(): Wrong argument error. Example: z_ip=\"eth0,192.168.0.100/24[,192.168.0.1][;eth1,10.0.0.42/8[,10.0.0.254]]\")"
	FRIENDLY_ARGS=$(echo "$1" | sed -r 's/;/ /g')
	for NETCFG in ${FRIENDLY_ARGS}; do
		local DEV=
		local IP_WITH_MASK=
		local GW=

		DEV=$(echo "${NETCFG}" | cut -d, -f1)
		IP_WITH_MASK=$(echo "${NETCFG}" | cut -d, -f2)
		GW=$(echo "${NETCFG}" | cut -d, -f3)

		local IP=
		local PREFIX=
		local MASK=

		IP=$(echo "${IP_WITH_MASK}" | cut -d/ -f1)
		PREFIX=$(echo "${IP_WITH_MASK}" | cut -d/ -f2)
		case "$PREFIX" in
			8)
				MASK=255.0.0.0
				;;
			16)
				MASK=255.255.0.0
				;;
			17)
				MASK=255.255.128.0
				;;
			18)
				MASK=255.255.192.0
				;;
			19)
				MASK=255.255.224.0
				;;
			20)
				MASK=255.255.240.0
				;;
			21)
				MASK=255.255.248.0
				;;
			22)
				MASK=255.255.252.0
				;;
			23)
				MASK=255.255.254.0
				;;
			24)
				MASK=255.255.255.0
				;;
			*)
				fatal "z_ip(): Unsupported IP prefix '$PREFIX'"
				;;
		esac

		info "Set up IP address: $IP $MASK for dev $DEV"
		ifconfig "$DEV" "$IP" netmask "$MASK" || fatal "Failure set IP address ${IP_WITH_MASK}."
		echo "ifconfig $DEV 0.0.0.0" >> /tmp/cleanup.sh
		echo "ifconfig $DEV down" >> /tmp/cleanup.sh

		if [ -z "$GW" ]; then
			info "Gateway is not defined"
		else
			info "Set up defult route: $GW"
			route add default gw "$GW" "$DEV" || fatal "Failure set default route to $GW from device $DEV."
		fi
	done
}

z_md() {
	[ -n "$1" ] || fatal "z_md():  Wrong argument error. Example: z_md=\"md0,sda1,[sdb1,...][;md1,sda5,[sdb5,...]]\""
	FRIENDLY_ARGS=$(echo "$1" | sed -r 's/;/ /g')
	for MDTARGET in ${FRIENDLY_ARGS}; do
		local MD_DEV=
		local MEMBER_DEVS=

		MD_DEV=/dev/$(echo "${MDTARGET}" | cut -d, -f1)
		MEMBER_DEVS=$(echo "${MDTARGET}" | cut -d, -f2- | cut -d: -f2- | sed -r 's/,/ /g' | sed 's/[^ ]* */\/dev\/&/g')

		info " Assembling software RAID ${MD_DEV} on devices ${MEMBER_DEVS}..."
		/sbin/mdadm --assemble --run ${MD_DEV} ${MEMBER_DEVS} || fatal "z_md(): Failure MD assemble software RAID ${MD_DEV} on devices ${MEMBER_DEVS}"
		#/sbin/mdadm --assemble --update=name --run ${MD_DEV} ${MEMBER_DEVS} || fatal "z_md(): Cannot MD assemble: ${MD_DEV} ${MEMBER_DEVS}"
	done
}

z_quiet() {
	QUIET="yes"
}

z_pwd() {
	[ -n "$1" ] || fatal "z_pwd(): Wrong argument error. Example: z_pwd=\"P@ssw0rd\""
	info "	Set RAMFS password for user 'root'"
	echo "root:$1" | /bin/busybox chpasswd
}

z_root() {
	[ -n "$1" ] || fatal "z_root(): Wrong argument error. Example: z_root=\"vg0/system,ext3[,ro][,discard]\" (no /dev prefix)"

	local DEV=
	local FS=
	local MOUNTPOINT=
	DEV=$(echo "$1" | cut -d, -f1)
	FS=$(echo "$1" | cut -d, -f2)
	OPTS=$(echo "$1" | cut -d, -f3-)

	[ -z "$DEV" ] && fatal "z_root(): Argument error. Bad device."
	[ -z "$FS" ] && fatal "z_root(): Argument error. Bad filesystem type."

	info "Mount filesystem /dev/$DEV ($FS) to /newroot"
	[ -b "/dev/$DEV" ] || fatal "z_root(): Device /dev/$DEV does not exist."
	if [ ! -d /newroot ]; then
		mkdir /newroot || fatal "z_root(): Cannot create mountpoint /newroot"
	fi

	mount -o "$OPTS" -n -t "$FS" "/dev/$DEV" /newroot || fatal "z_root(): Failure mount /dev/$DEV to /newroot"
}

z_shell() {
	local COUNTDOWN=
	COUNTDOWN=0
	if [ -n "$1" ]; then
		let "COUNTDOWN=$1*1"
	fi

	if [ $COUNTDOWN -eq 0 ]; then
		echo
		info " Shell was started by z_shell(). Exit from current shell to continue init script."
		/bin/busybox sh
	else
		echo -n " Press 'S' to enter interactive shell..."

		while [ $COUNTDOWN -gt 0 ]; do
			let "COUNTDOWN=$COUNTDOWN-1"
			KEY=""
			read -t 1 -s -n 1 KEY
			if [ "$KEY" == "S" -o "$KEY" == "s" ]; then
				echo
				info " Shell was started by z_shell(). Exit from current shell to continue init script."
				/bin/busybox sh
				break;
			elif [ -n "$KEY" ]; then
				let "COUNTDOWN=$COUNTDOWN+1"
			fi
			echo -n " $COUNTDOWN"
		done
	fi
	echo
}

z_snap() {
	[ -n "$1" ] || fatal "z_snap(): Wrong argument error. Example: z_snap=\"vg0/luks-root,10G[,force];vg0/luks-home,250M\""

 	local FRIENDLY_ARGS=

	FRIENDLY_ARGS=$(echo "$1" | sed -r 's/;/ /g')

	for SNAP in ${FRIENDLY_ARGS}; do
		local LV_DEV=
		local LV_SIZE=
		local LV_SNAPNAME=
		local LV_SNAPDEV=
		local FORCE=

		LV_DEV=/dev/$(echo "${SNAP}" | cut -d, -f1)
		LV_SIZE=$(echo "${SNAP}" | cut -d, -f2)
		LV_SNAPNAME=$(basename "${LV_DEV}")-bootsnap
		LV_SNAPDEV=$(dirname "${LV_DEV}")/${LV_SNAPNAME}
		FORCE=$(echo "${SNAP}" | cut -d, -f3)

		if [ -b "${LV_SNAPDEV}" ]; then
			if [ "${FORCE}" == "force" ]; then
				info "	Removing previous snapshot"
				local LV_ORIGIN=
				LV_ORIGIN=$(/sbin/lvs "${LV_SNAPDEV}" | tail -n 1 | awk '{print $5}')
				[ -z "${LV_ORIGIN}" ] && fatal "Looks like ${LV_SNAPDEV} is not a snapshot(has not Pool Origin)! Something wrong in ZXInit configuration! Please check!"
				/sbin/lvremove -f "${LV_SNAPDEV}" || fatal "Failure remove LV snapshot ${LV_SNAPDEV}"
			else
				warn "	Skip creation of boot snaphot due it already exist." 
			fi
		else
			info "	Create LVM snapshot ${LV_SNAPNAME} (size: ${LV_SIZE}) for volume ${LV_DEV}"
			/sbin/lvcreate --snapshot --permission r --size "${LV_SIZE}" --name "${LV_SNAPNAME}" "${LV_DEV}" || fatal "Failure create LV snapshot."
		fi
	done
}

z_stratum_root() {
	[ -n "$1" ] || fatal "z_stratum_root(): Wrong argument error. Example: z_stratum_root=\"vg0/stratum-images,ext4,vg0/stratum-state,ext4,d6779c7557a8f32fc5f4d636f74925241d9cc37a18d2f27683c3e87e983611bf\""

	local STRATUM_IMAGES_DEV=
	local STRATUM_IMAGES_FS=
	local STRATUM_STATE_DEV=
	local STRATUM_STATE_FS=
	local STRATUM_ROOT_IMAGE=

	STRATUM_IMAGES_DEV=/dev/$(echo "$1" | cut -d, -f1)
	STRATUM_IMAGES_FS=$(echo "$1" | cut -d, -f2)
	STRATUM_STATE_DEV=/dev/$(echo "$1" | cut -d, -f3)
	STRATUM_STATE_FS=$(echo "$1" | cut -d, -f4)
	STRATUM_ROOT_IMAGE=$(echo "$1" | cut -d, -f5)

	mkdir /stratum || fatal "z_stratum_root(): Failure create directory /stratum"
	mkdir /stratum/images || fatal "z_stratum_root(): Failure create directory /stratum/images"
	mkdir /stratum/state || fatal "z_stratum_root(): Failure create directory /stratum/state"

	mount -t "${STRATUM_IMAGES_FS}" -o ro "${STRATUM_IMAGES_DEV}" /stratum/images || fatal "Failure mount \"${STRATUM_IMAGES_DEV}\" to /stratum/images"
	mount -t "${STRATUM_STATE_FS}" -o rw "${STRATUM_STATE_DEV}" /stratum/state || fatal "Failure mount \"${STRATUM_STATE_DEV}\" to /stratum/state"

	echo
	info " z_stratum_root() is not implemented yet."
	/bin/busybox sh
}

z_ssh() {
	[ ! -f /root/dropbear.rsa ] && /usr/bin/dropbearkey -t rsa -f /root/dropbear.rsa
	[ ! -f /root/dropbear.dss ] && /usr/bin/dropbearkey -t dss -f /root/dropbear.dss

	/usr/sbin/dropbear -r /root/dropbear.rsa -d /root/dropbear.dss || fatal "Failure start Dropbear SSH Server"
	echo "pkill -f /usr/sbin/dropbear" >> /tmp/cleanup.sh
}

z_uncrypt() {
	[ -n "$1" ] || fatal "z_uncrypt(): Wrong argument error. Example: z_uncrypt=\"sda2,uncrypted-sda2[,discard][;vg0/luks-root,uncrypted-root[,discard]]\" (no /dev prefix)"
	/uncrypt "$1" || fatal "z_uncrypt(): Script /uncrypt failed."
	return 0
}

z_verbose() {
	set -x
}

z_vg() {
	[ -n "$1" ] || fatal "z_vg(): Wrong argument error. Example: z_vgs=\"vg0;vg1;vg2;...\" (no /dev prefix)"

	info " Scanning for Volume Groups"
	/sbin/vgscan || fatal "z_vg(): Failure scan volume groups"

 	local FRIENDLY_ARGS=

	FRIENDLY_ARGS=$(echo "$1" | sed -r 's/;/ /g')

	for VG in ${FRIENDLY_ARGS}; do
 		info " Activating Volume Group: $VG"
		/sbin/vgchange --activate y "$VG" || fatal "z_vg(): Failure activate volume $VG"
	done
}


# Set up busybox'es symlinks
/bin/busybox --install -s || fatal "Failure install busybox symlinks"

touch /var/log/lastlog || fatal "Failure create /var/log/lastlog"

ln -s /proc/mounts /etc/mtab || fatal "Failure link /etc/mtab -> /proc/mounts"

echo "Starting udev daemon..."
/sbin/udevd --daemon --resolve-names=never
UDEV_RC=$?
udevadm trigger
udevadm settle
[ $UDEV_RC -eq 0 ] || fatal "Failed to start udev daemon. Exit code: $UDEV_RC"
unset UDEV_RC

# Prepare cleanup script
echo "#!/bin/busybox sh" > /tmp/cleanup.sh
echo >> /tmp/cleanup.sh
echo "set -e" >> /tmp/cleanup.sh
echo >> /tmp/cleanup.sh
chmod +x /tmp/cleanup.sh || fatal "Failure make executeble cleanup script tmp/cleanup.sh"


# Kernel command-line
KCMD=$(cat "/proc/cmdline")

echo "Executing commands..."
for PARAM in $KCMD; do
	NAME=$(echo "$PARAM" | awk -F= '{print $1}')
	VALUE=$(echo "$PARAM" | awk -F= '{print $2}' | sed -e 's/^"//' -e 's/"$//')
	case "$NAME" in
		z_*)
			$NAME "$VALUE" || fatal "Failure execute $NAME $VALUE"
			;;
	esac
	unset NAME
	unset VALUE
done

echo "Stopping udev daemon..."
killall udevd
sleep 1

if [ -x /tmp/cleanup.sh ]; then
	echo "Executing cleanup script..."
	/tmp/cleanup.sh || fatal "Cleanup failed."
fi

if [ -d /newroot/lib ]; then
	KERNEL_RELEASE=$(uname -r)
	if [ -d "/lib/modules/${KERNEL_RELEASE}" ]; then
			echo "Checking modules..."
			MODULES_NEED_TO_COPY="no"
			if [ ! -d "/newroot/lib/modules/${KERNEL_RELEASE}" ]; then
				MODULES_NEED_TO_COPY="yes"
			else
				cd /lib/modules/
				RELEASE_MODULES_SUM=$(find "${KERNEL_RELEASE}" -type f | sort | xargs sha1sum | sha1sum | cut -d' ' -f1)
				cd /newroot/lib/modules/
				EXISTING_MODULES_SUM=$(find "${KERNEL_RELEASE}" -type f | sort | xargs sha1sum | sha1sum | cut -d' ' -f1)
				if [ "${RELEASE_MODULES_SUM}" != "${EXISTING_MODULES_SUM}" ]; then
					MODULES_NEED_TO_COPY="yes"
				fi
			fi

			if [ "${MODULES_NEED_TO_COPY}" = "yes" ]; then
				NEWROOT_MOUNT_OPTS=$(grep /newroot /proc/mounts | cut -d' ' -f4)
				if [ $? -ne 0 ]; then
					fatal "Failure obtain mount options of /newroot"
				fi
				info "Re-mounting the /newroot filesystem as RW to copy modules..."
				mount -o remount,rw /newroot || fatal "Failure re-mount /newroot as RW"
				if [ ! -d /newroot/lib/modules ]; then
					mkdir /newroot/lib/modules || fatal "Failure create /newroot/lib/modules directory"
				fi
				cp -a "/lib/modules/${KERNEL_RELEASE}" /newroot/lib/modules/ || fatal "Failure copy modules"
				info "Modules ${KERNEL_RELEASE} were copied into /newroot/lib/modules"

				info "Re-mounting the /newroot filesystem with original options '${NEWROOT_MOUNT_OPTS}' ..."
				mount -o "remount,${NEWROOT_MOUNT_OPTS}" /newroot || fatal "Failure re-mount /newroot as ${NEWROOT_MOUNT_OPTS}"

				sleep 3
			else
				info "Skip modules syncing. Looks like modules are same in initramfs and rootfs"
			fi
	else
		info "Skip modules syncing due the initramfs has not embedded kernel modules."
	fi

else
	warn "Modules from /lib/modules/${KERNEL_RELEASE} were not synced due directory /newroot/lib is not exist."
fi

echo 1 > /proc/sys/kernel/printk

# Clean up.
umount -n /sys || fatal "Cannot umount /sys"
umount -n /dev/pts || fatal "Cannot umount /dev/pts"
umount -n /dev || fatal "Cannot umount /dev"

echo 1 > /proc/sys/kernel/printk

umount -n /proc || fatal "Cannot umount /proc"

# Boot the real thing.
exec switch_root /newroot /sbin/init $@